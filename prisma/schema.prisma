// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId      String           @id
  username    String
  firstName   String
  lastName    String
  age         Int
  email       String           @unique
  authority   Int              @default(0)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  isDeleted   Boolean          @default(false)
  deletedAt   DateTime?
  preferences UserPreference[]
  allergies   UserAllergy[]
  orders      OrderUser[]
}

model Allergy {
  allergyId Int              @id @default(autoincrement())
  name      String           @unique
  users     UserAllergy[]
  products  ProductAllergy[]
}

model Product {
  productId          Int                 @id @default(autoincrement())
  productName        String
  price              Int
  category           Category            @relation(fields: [categoryId], references: [categoryId])
  categoryId         Int
  description        String
  isSoldOut          Boolean             @default(false)
  productAllergies   ProductAllergy[]
  productIngredients ProductIngredient[]
  orderDetails       OrderDetail[]
  menuProducts       MenuProduct[]
  isDeleted          Boolean             @default(false)
  deletedAt          DateTime?
}

model Category {
  categoryId   Int       @id @default(autoincrement())
  categoryName String    @unique
  products     Product[]
}

model Ingredient {
  ingredientId    Int                 @id @default(autoincrement())
  ingredientName  String              @unique
  products        ProductIngredient[]
  userPreferences UserPreference[]
}

model Store {
  storeId   Int          @id @default(autoincrement())
  storeName String       @unique
  tables    StoreTable[]
}

model UserPreference {
  userPreferenceId Int        @id @default(autoincrement())
  ingredientType   TYPE
  ingredient       Ingredient @relation(fields: [ingredientId], references: [ingredientId])
  ingredientId     Int
  user             User       @relation(fields: [userId], references: [userId])
  userId           String
}

model StoreTable {
  tableId          Int                @id @default(autoincrement())
  store            Store              @relation(fields: [storeId], references: [storeId])
  storeId          Int
  tableName        String
  orders           Order[]
  storeTableStatus StoreTableStatus[]
}

model UserAllergy {
  userAllergyId Int     @id @default(autoincrement())
  user          User    @relation(fields: [userId], references: [userId])
  userId        String
  allergy       Allergy @relation(fields: [allergyId], references: [allergyId])
  allergyId     Int
}

model ProductAllergy {
  productAllergyId Int     @id @default(autoincrement())
  product          Product @relation(fields: [productId], references: [productId])
  productId        Int
  allergy          Allergy @relation(fields: [allergyId], references: [allergyId])
  allergyId        Int
}

model ProductIngredient {
  productIngredientId Int        @id @default(autoincrement())
  product             Product    @relation(fields: [productId], references: [productId])
  productId           Int
  ingredient          Ingredient @relation(fields: [ingredientId], references: [ingredientId])
  ingredientId        Int
}

model MenuProduct {
  menuProductId Int     @id @default(autoincrement())
  menu          Menu    @relation(fields: [menuId], references: [menuId])
  menuId        Int
  product       Product @relation(fields: [productId], references: [productId])
  productId     Int
  pages         Int
  displayOrder  Int
}

model Menu {
  menuId           Int           @id @default(autoincrement())
  menuCategoryName String        @unique
  displayOrder     Int
  menuProducts     MenuProduct[]
}

model Order {
  orderId     Int           @id @default(autoincrement())
  orderedAt   DateTime      @default(now())
  storeTable  StoreTable    @relation(fields: [tableId], references: [tableId])
  tableId     Int
  orderDetail OrderDetail[]
  orderUser   OrderUser[]
}

model OrderDetail {
  orderDetailId Int         @id @default(autoincrement())
  order         Order       @relation(fields: [orderId], references: [orderId])
  orderId       Int
  product       Product     @relation(fields: [productId], references: [productId])
  productId     Int
  quantity      Int
  orderStatus   ORDERSTATUS @default(COOKING)
}

model OrderUser {
  orderUserId Int    @id @default(autoincrement())
  order       Order  @relation(fields: [orderId], references: [orderId])
  orderId     Int
  user        User   @relation(fields: [userId], references: [userId])
  userId      String
}

model StoreTableStatus {
  storeTableStatusId Int         @id @default(autoincrement())
  storeTable         StoreTable  @relation(fields: [tableId], references: [tableId])
  tableId            Int
  status             TABLESTATUS @default(EMPTY)
  numberOfPeople     Int
  calling            Boolean     @default(false)
}

model OrderHistoryLog {
  orderHistoryLogId Int              @id @default(autoincrement())
  orderId           Int
  orderedAt         DateTime
  tableId           Int
  orderDetails      OrderDetailLog[]
}

model OrderDetailLog {
  orderDetailLogId  Int             @id @default(autoincrement())
  orderHistoryLog   OrderHistoryLog @relation(fields: [orderHistoryLogId], references: [orderHistoryLogId])
  orderHistoryLogId Int
  productId         Int
  quantity          Int
  orderStatus       ORDERSTATUS
}

enum ORDERSTATUS {
  COOKING
  COOKED
  SERVED
}

enum TYPE {
  LIKE
  DISLIKE
}

enum TABLESTATUS {
  EMPTY
  USING
}
